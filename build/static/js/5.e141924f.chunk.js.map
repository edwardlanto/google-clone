{"version":3,"sources":["hooks/useGoogleSearch.js","views/SearchPage/index.js","components/Search/index.js"],"names":["useGoogleSearch","term","useState","data","setData","useEffect","urlTerm","URL","window","location","href","searchParams","get","axios","then","res","fetchData","SearchPage","useStateValue","className","to","src","alt","Search","hideButtons","searchInformation","formattedTotalResults","formattedSearchTime","items","map","item","index","pagemap","cse_image","key","link","onError","document","getElementsByClassName","style","display","handleError","displayLink","title","snippet","_term","input","setInput","dispatch","history","useHistory","search","lucky","a","push","type","actionTypes","SET_SEARCH_TERM","windowLocation","formattedUrl","onSubmit","e","preventDefault","submit","value","onChange","target","onClick"],"mappings":"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","file":"static/js/5.e141924f.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst useGoogleSearch = (term) => {\r\n  const [data, setData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchData = () => {\r\n      const url = new URL(window.location.href);\r\n      const urlTerm = url.searchParams.get(\"term\");\r\n      axios(`https://www.googleapis.com/customsearch/v1?key=AIzaSyDx6QVpLxxHK8NyjDKSk_bDD_IhJyXdr80&cx=f03019cb4ab7b624f&q=${urlTerm ? urlTerm : term}\r\n      `).then((res) => setData(res));\r\n    };\r\n\r\n\r\n    fetchData();\r\n  }, [term]);\r\n\r\n  return {\r\n    data,\r\n  };\r\n};\r\n\r\nexport default useGoogleSearch;","import React from \"react\";\r\nimport { useStateValue } from \"../../providers/StateProvider\";\r\nimport useGoogleSearch from \"../../hooks/useGoogleSearch\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Search from \"../../components/Search\";\r\nimport \"./index.css\";\r\n\r\nfunction SearchPage() {\r\n  // Grab val from context api provider.\r\n  const [{ term }] = useStateValue(() => \"\");\r\n  let { data } = useGoogleSearch(term);\r\n\r\n  const handleError = (src, index) => {\r\n\r\n    // Error handle all broken images\r\n  const errorImages = document.getElementsByClassName(\r\n      `searchPage__resultImage`\r\n    );\r\n\r\n    // Access HTML Collection\r\n    errorImages.item(index).style.display = \"none\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"searchPage\">\r\n      <div className=\"searchPage__header\">\r\n        <Link to=\"/\">\r\n          <img\r\n            src=\"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\"\r\n            alt=\"Google logo\"\r\n            className=\"searchPage__logo\"\r\n          />\r\n        </Link>\r\n        <div className=\"searchPage__headerBody\">\r\n          <Search hideButtons />\r\n        </div>\r\n      </div>\r\n\r\n      {data !== null && (\r\n        <div className=\"searchPage__results\">\r\n          <p className=\"searchPage__resultCount\">\r\n            About {data.data.searchInformation?.formattedTotalResults} results (\r\n            {data.data.searchInformation.formattedSearchTime} seconds)\r\n          </p>\r\n          {data?.data.items.map((item, index) => {\r\n            return (\r\n              item.pagemap.cse_image?.[0] && (\r\n                <div className=\"searchPage__result\" key={index}>\r\n                  <a href={item.link}>\r\n                    {item.pagemap.cse_image?.[0]?.src}\r\n                    <img\r\n                      src={item.pagemap.cse_image?.[0]?.src}\r\n                      className=\"searchPage__resultImage\"\r\n                      alt={`result image thumbnail`}\r\n                      // Handle broken images\r\n                      onError={() =>\r\n                        handleError(item.pagemap.cse_image?.[0].src, index)\r\n                      }\r\n                    />\r\n                  </a>\r\n\r\n                  <a href={item.link}>{item.displayLink}</a>\r\n                  <a href={item.link} className=\"searchPage__resultTitle\">\r\n                    <h2>{item.title}</h2>\r\n                  </a>\r\n                  <p className=\"searchPage__resultSnippet\">{item.snippet}</p>\r\n                </div>\r\n              )\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchPage;\r\n","import React, { useState } from \"react\";\r\nimport \"./index.css\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStateValue } from \"../../providers/StateProvider\";\r\nimport { actionTypes } from \"../../reducers\";\r\nimport axios from \"axios\";\r\n\r\nfunction Search({ hideButtons = false }) {\r\n  const url = new URL(window.location.href);\r\n  let _term = url.searchParams.get(\"term\");\r\n  const [input, setInput] = useState(() => _term ? _term : \"\");\r\n  const [{}, dispatch] = useStateValue();\r\n  const history = useHistory();\r\n  const search = async (lucky) => {\r\n\r\n    // If lucky button is pressed\r\n    if (lucky === false) {\r\n      history.push(`/search?term=${input}`);\r\n      dispatch({\r\n        type: actionTypes.SET_SEARCH_TERM,\r\n        term: _term !== null ? _term : input\r\n      });\r\n    } else if (lucky === true) {\r\n      // This is for if the user presses \"I'm feeling lucky\" to redirect them.\r\n      const res = await axios.get(`https://www.googleapis.com/customsearch/v1?key=AIzaSyDx6QVpLxxHK8NyjDKSk_bDD_IhJyXdr80\r\n      &cx=AIzaSyDx6QVpLxxHK8NyjDKSk_bDD_IhJyXdr80&q=${input}`);\r\n      const windowLocation = res.data.items[0].formattedUrl;\r\n      window.location.href = windowLocation;\r\n    }\r\n  };\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    // This url is used to save term state onreload\r\n    history.push(`/search?term=${input}`);\r\n    dispatch({\r\n      type: actionTypes.SET_SEARCH_TERM,\r\n      term: input,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form className=\"search\" onSubmit={(e) => submit(e)}>\r\n      <div className=\"search__input\">\r\n        <SearchIcon className=\"search__inputIcon\" />\r\n        <input value={input} onChange={(e) => setInput(e.target.value)}/>\r\n        <MicIcon />\r\n      </div>\r\n\r\n      {!hideButtons ? (\r\n        <div className=\"search__buttons\">\r\n          <Button onClick={() => search(false)}>Google Search</Button>\r\n          <Button onClick={() => search(true)}>I'm Feeling Lucky</Button>\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Search;"],"sourceRoot":""}